{"version":3,"sources":["../src/mercurial.js"],"names":[],"mappings":"AAAA;;;;AAGA,MAAM,KAAK,QAAQ,SAAR,EAAmB,EAAnB;AACX,MAAM,OAAO,QAAQ,SAAR,EAAmB,IAAnB;AACb,MAAM,OAAO,QAAQ,SAAR,EAAmB,IAAnB;AACb,MAAM,MAAM,QAAQ,SAAR,EAAmB,GAAnB;;AAEZ,MAAM,MAAM,QAAQ,YAAR,CAAN;;AAEN,MAAM,SAAS,KAAT;;AAEN,SAAS,YAAT,CAAsB,OAAtB,EAA+B,IAA/B,EAAqC,OAArC,EAA8C;AAC1C,QAAI,GAAG,IAAH,MAAa,IAAb,EAAmB;AACnB,gBAAQ,KAAR,CAAc,IAAI,KAAJ,CAAU,CAAC,gBAAD,GAAmB,IAAI,IAAJ,CAAS,IAAT,CAAnB,EAAkC,eAAlC,CAAV,CAAd,EADmB;AAEnB,eAAO,CAAP,CAFmB;KAAvB;;AAKA,QAAI,OAAO,KAAK,OAAL,EAAc,EAAC,QAAQ,IAAR,EAAf,CAAP,CANsC;;AAQ1C,QAAI,OAAJ,EAAa;AACT,aAAK,IAAI,EAAJ,CAAO,KAAK,MAAL,CAAZ,EADS;KAAb;;AAIA,OAAG,MAAH,EAZ0C;;AAc1C,WAAO,KAAK,IAAL,CAdmC;CAA9C;;AAiBA,SAAS,aAAT,CAAuB,GAAvB,EAA4B,KAA5B,EAAmC;AAC/B,QAAI,CAAC,KAAD,EAAQ;AACR,aAAK,GAAL,EADQ;KAAZ;CADJ;;AAMA,SAAS,IAAT,CAAc,IAAd,EAAoB,OAApB,EAA6B;AACzB,cAAU,WAAW,EAAX,CADe;;AAGzB,kBAAc,IAAI,GAAJ,CAAQ,CAAC,oBAAD,GAAuB,IAAI,IAAJ,CAAS,IAAT,CAAvB,EAAsC,CAA9C,CAAd,EAAgE,QAAQ,KAAR,CAAhE,CAHyB;;AAKzB,QAAI,aAAa,mBAAb,EAAkC,IAAlC,EAAwC,QAAQ,OAAR,CAAxC,KAA6D,CAA7D,EAAgE;AAChE,gBAAQ,KAAR,CAAc,IAAI,KAAJ,CAAU,CAAC,SAAD,GAAY,IAAI,IAAJ,CAAS,IAAT,CAAZ,EAA2B,OAA3B,CAAV,CAAd,EADgE;AAEhE,eAAO,KAAP,CAFgE;KAApE;;AAKA,WAAO,IAAP,CAVyB;CAA7B;;AAaA,SAAS,MAAT,CAAgB,IAAhB,EAAsB,GAAtB,EAA2B,OAA3B,EAAoC;AAChC,cAAU,WAAW,EAAX,CADsB;;AAGhC,QAAI,CAAC,KAAK,IAAL,EAAW,OAAX,CAAD,EAAsB;AACtB,eAAO,KAAP,CADsB;KAA1B;;AAIA,kBAAc,IAAI,GAAJ,CAAQ,CAAC,SAAD,GAAY,IAAI,IAAJ,CAAS,IAAT,CAAZ,EAA2B,SAA3B,GAAsC,IAAI,GAAJ,CAAQ,GAAR,CAAtC,EAAmD,CAA3D,CAAd,EAA6E,QAAQ,KAAR,CAA7E,CAPgC;;AAShC,QAAI,aAAa,CAAC,UAAD,GAAa,GAAb,EAAiB,CAA9B,EAAiC,IAAjC,EAAuC,QAAQ,OAAR,CAAvC,KAA4D,CAA5D,EAA+D;AAC/D,gBAAQ,KAAR,CAAc,IAAI,KAAJ,CAAU,CAAC,WAAD,GAAc,IAAI,IAAJ,CAAS,IAAT,CAAd,EAA6B,OAA7B,CAAV,CAAd,EAD+D;AAE/D,eAAO,KAAP,CAF+D;KAAnE;;AAKA,WAAO,IAAP,CAdgC;CAApC;;AAiBA,OAAO,OAAP,GAAiB;AACb,cADa;AAEb,kBAFa;CAAjB","file":"mercurial.js","sourcesContent":["'use strict';\r\n\r\n//const $ = require('shelljs');\r\nconst cd = require('shelljs').cd;\r\nconst echo = require('shelljs').echo;\r\nconst exec = require('shelljs').exec;\r\nconst pwd = require('shelljs').pwd;\r\n\r\nconst msg = require('./messages');\r\n\r\nconst hgRoot = pwd();\r\n\r\nfunction runHgCommand(command, repo, verbose) {\r\n    if (cd(repo) === null) {\r\n        console.error(msg.error(`sub-repository, ${msg.repo(repo)}, doesn't exist`));\r\n        return 1;\r\n    }\r\n    \r\n    let proc = exec(command, {silent: true});\r\n    \r\n    if (verbose) {\r\n        echo(msg.hg(proc.stdout));\r\n    }\r\n    \r\n    cd(hgRoot);\r\n    \r\n    return proc.code;\r\n}\r\n\r\nfunction logIfNotQuiet(msg, quiet) {\r\n    if (!quiet) {\r\n        echo(msg);\r\n    }\r\n}\r\n\r\nfunction pull(repo, options) {\r\n    options = options || {};\r\n    \r\n    logIfNotQuiet(msg.cmd(`pulling changes for ${msg.repo(repo)}`), options.quiet);\r\n    \r\n    if (runHgCommand('hg pull --verbose', repo, options.verbose) !== 0) {\r\n        console.error(msg.error(`pull for ${msg.repo(repo)} failed`));\r\n        return false;\r\n    }\r\n    \r\n    return true;\r\n}\r\n\r\nfunction update(repo, tag, options) {\r\n    options = options || {};\r\n    \r\n    if (!pull(repo, options)) {            \r\n        return false;\r\n    }\r\n    \r\n    logIfNotQuiet(msg.cmd(`updating ${msg.repo(repo)} to tag: ${msg.tag(tag)}`), options.quiet);\r\n    \r\n    if (runHgCommand(`hg update ${tag}`, repo, options.verbose) !== 0) {\r\n        console.error(msg.error(`update for ${msg.repo(repo)} failed`));\r\n        return false;\r\n    }\r\n    \r\n    return true;\r\n}\r\n\r\nmodule.exports = {\r\n    pull,\r\n    update\r\n};\r\n"]}